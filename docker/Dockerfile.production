# Production-ready Dockerfile for Korean Flashcard Pipeline
# Optimized for personal use with security and performance enhancements

# Stage 1: Build Rust components
FROM rust:1.75-slim as rust-builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy Rust source files
COPY Cargo.toml Cargo.lock ./
COPY src/rust ./src/rust

# Build Rust components in release mode with optimizations
RUN cargo build --release --locked

# Stage 2: Python builder
FROM python:3.11-slim as python-builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 3: Final production image
FROM python:3.11-slim

# Install production runtime dependencies
RUN apt-get update && apt-get install -y \
    sqlite3 \
    curl \
    ca-certificates \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r flashcard && useradd -r -g flashcard flashcard

# Set working directory
WORKDIR /app

# Copy Rust binaries from builder
COPY --from=rust-builder /build/target/release/flashcard_pipeline /usr/local/bin/
RUN chmod +x /usr/local/bin/flashcard_pipeline

# Copy Python dependencies from builder
COPY --from=python-builder /root/.local /home/flashcard/.local

# Copy application source
COPY --chown=flashcard:flashcard src/python ./src/python
COPY --chown=flashcard:flashcard migrations ./migrations
COPY --chown=flashcard:flashcard scripts ./scripts
COPY --chown=flashcard:flashcard templates ./templates

# Copy configuration files
COPY --chown=flashcard:flashcard .env.production .env.example

# Create necessary directories with proper permissions
RUN mkdir -p logs data/input data/output data/export cache .cache/flashcards && \
    chown -R flashcard:flashcard /app && \
    chmod -R 755 /app/scripts

# Set environment variables
ENV PYTHONPATH=/app/src/python \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/home/flashcard/.local/bin:${PATH}" \
    DATABASE_PATH=/app/data/pipeline.db \
    LOG_FILE=/app/logs/pipeline.log \
    CACHE_DIR=/app/cache \
    FLASHCARD_ENV=production

# Create volume mount points
VOLUME ["/app/data", "/app/logs", "/app/cache", "/app/.env"]

# Switch to non-root user
USER flashcard

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -m flashcard_pipeline test connection || exit 1

# Use tini as init system to handle signals properly
ENTRYPOINT ["/usr/bin/tini", "--"]

# Default command - run the enhanced CLI
CMD ["python", "-m", "flashcard_pipeline", "--help"]

# Labels for metadata
LABEL maintainer="deploy@flashcard-pipeline.dev" \
      version="1.0.0" \
      description="Production-ready Korean Flashcard Pipeline" \
      org.opencontainers.image.source="https://github.com/anthropic-flashcards/korean-flashcard-pipeline"