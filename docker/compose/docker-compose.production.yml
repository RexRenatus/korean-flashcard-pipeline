version: '3.8'

services:
  # Main Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    image: flashcard-pipeline:latest
    container_name: flashcard-app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - APP_ENV=production
    ports:
      - "8000:8000"  # API Port
      - "9090:9090"  # Metrics Port
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
    depends_on:
      redis:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "python", "/app/scripts/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    networks:
      - flashcard-network

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: flashcard-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - flashcard-network

  # Database Initialization Service
  db-init:
    build:
      context: .
      dockerfile: Dockerfile
    image: flashcard-pipeline:latest
    container_name: flashcard-db-init
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./migrations:/app/migrations
    command: ["python", "/app/scripts/migration_runner_v2.py"]
    networks:
      - flashcard-network

  # Backup Service (runs as a cron job)
  backup:
    build:
      context: .
      dockerfile: Dockerfile
    image: flashcard-pipeline:latest
    container_name: flashcard-backup
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./backups:/app/backups
      - ./logs:/app/logs
    command: ["sh", "-c", "while true; do /app/scripts/backup.sh; sleep 86400; done"]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - flashcard-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: flashcard-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - flashcard-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: flashcard-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - flashcard-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: flashcard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    networks:
      - flashcard-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  flashcard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16