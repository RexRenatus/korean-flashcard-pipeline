[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flashcard-pipeline"
version = "1.0.0"
description = "AI-powered Korean language flashcard generation system"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Korean Flashcard Pipeline Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Topic :: Education :: Computer Aided Instruction (CAI)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "httpx>=0.24.0",
    "aiofiles>=23.0.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "aiosqlite>=0.19.0",
    "tqdm>=4.65.0",
    "PyYAML>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "flake8",
    "mypy",
    "ruff",
]
monitoring = [
    "watchdog>=2.0",
]
scheduling = [
    "schedule>=1.0",
]
export = [
    "genanki>=0.13",
    "reportlab>=3.6",
    "markdown>=3.0",
    "pandas>=1.3",
]
all = [
    "flashcard-pipeline[dev,monitoring,scheduling,export]",
]

[project.urls]
"Homepage" = "https://github.com/anthropic-flashcards/korean-flashcard-pipeline"
"Bug Reports" = "https://github.com/anthropic-flashcards/korean-flashcard-pipeline/issues"
"Source" = "https://github.com/anthropic-flashcards/korean-flashcard-pipeline"

[project.scripts]
flashcard-pipeline = "flashcard_pipeline.cli_v2:main"
flashcard-pipeline-simple = "flashcard_pipeline.pipeline_cli:main"
flashcard-pipeline-enhanced = "flashcard_pipeline.cli_enhanced:main"

[tool.setuptools]
package-dir = {"" = "src/python"}
packages = ["flashcard_pipeline"]

[tool.setuptools.package-data]
flashcard_pipeline = [
    "templates/*.html",
    "templates/*.css", 
    "migrations/*.sql",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src/python/flashcard_pipeline"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false