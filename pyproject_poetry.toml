[tool.poetry]
name = "flashcard-pipeline"
version = "2.0.0"
description = "AI-powered Korean language flashcard generation system"
authors = ["RexRenatus <dev@rexrenatus.io>"]
readme = "README.md"
homepage = "https://github.com/RexRenatus/korean-flashcard-pipeline"
repository = "https://github.com/RexRenatus/korean-flashcard-pipeline"
documentation = "https://github.com/RexRenatus/korean-flashcard-pipeline/tree/main/docs"
keywords = ["korean", "flashcards", "ai", "language-learning", "anki"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Topic :: Education :: Computer Aided Instruction (CAI)",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = "^3.9"
httpx = {extras = ["http2"], version = "^0.25.0"}
pydantic = "^2.5.0"
python-dotenv = "^1.0.0"
typer = {extras = ["all"], version = "^0.9.0"}
rich = "^13.7.0"
aiofiles = "^23.2.1"
aiosqlite = "^0.19.0"
pyyaml = "^6.0.1"
watchdog = "^3.0.0"
schedule = "^1.2.0"
click = "^8.1.7"
psutil = "^5.9.0"
tabulate = "^0.9.0"
lz4 = "^4.3.2"
pydantic-openapi-schema = "^1.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.12.0"
ruff = "^0.1.9"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[tool.poetry.scripts]
flashcard-pipeline = "flashcard_pipeline.cli.main:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | __pycache__
  | venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/python/flashcard_pipeline"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false